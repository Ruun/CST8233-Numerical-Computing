maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("\nErrors:\n")
cat("Term\tln(1+x)\tAbsolute Error\tRelative Error\n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, "\t", series, "\t", abs_error, "\t", rel_error, "\n")
# results <- rbind(results, data.frame(Term = n, Series_Value = series, Absolute_Error = abs_error, Relative_Error = rel_error))
}
#return(results)
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term\tln(1+x)\tAbsolute Error\tRelative Error\n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, "\t", series, "\t", abs_error, "\t", rel_error, "\n")
# results <- rbind(results, data.frame(Term = n, Series_Value = series, Absolute_Error = abs_error, Relative_Error = rel_error))
}
#return(results)
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 100) {
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric())
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
results <- rbind(results, data.frame(Term = n, Series_Value = series))
}
return(results)
}
# Compute series for 100 terms
results_100 <- maclaurin_ln(x, terms = 100)
# Plot the series as a function of the number of terms
library(ggplot2)
ggplot(results_100, aes(x = Term, y = Series_Value)) +
geom_line(color = "blue") +
labs(title = "Maclaurin Series Approximation of ln(1 + x) with 100 Terms",
x = "Number of Terms",
y = "Series Value") +
theme_minimal()
library(readxl)
library(ggplot2)
# Load necessary libraries
library(readxl)
library(ggplot2)
# Load the data
rocket_data <- read_excel("/Users/thelion/CST8233-Numerical-Computing/rocket1.xlsx")
# Rename columns for convenience
colnames(rocket_data) <- c("Time", "Distance")
# Plot the distance travelled by the rocket as a function of time
ggplot(rocket_data, aes(x = Time, y = Distance)) +
geom_line(color = "blue") +
labs(title = "Distance Travelled by the Rocket",
x = "Time (sec)",
y = "Distance (m)") +
theme_minimal()
# Function to compute the first derivative using Central Divided Difference (CDD)
compute_first_derivative <- function(xVec, yVec) {
n <- length(xVec)
firstDev <- numeric(n)
for (i in 2:(n - 1)) {
firstDev[i] <- (yVec[i + 1] - yVec[i - 1]) / (xVec[i + 1] - xVec[i - 1])
}
# Use forward difference for the first point and backward difference for the last point
firstDev[1] <- (yVec[2] - yVec[1]) / (xVec[2] - xVec[1])
firstDev[n] <- (yVec[n] - yVec[n - 1]) / (xVec[n] - xVec[n - 1])
return(firstDev)
}
# Compute the velocity of the rocket at each time
velocity <- compute_first_derivative(rocket_data$Time, rocket_data$Distance)
# Plot the velocity as a function of time
ggplot(data.frame(Time = rocket_data$Time, Velocity = velocity), aes(x = Time, y = Velocity)) +
geom_line(color = "red") +
labs(title = "Velocity of the Rocket",
x = "Time (sec)",
y = "Velocity (m/sec)") +
theme_minimal()
# Function to compute the second derivative
compute_second_derivative <- function(xVec, yVec) {
n <- length(xVec)
secondDev <- numeric(n)
for (i in 2:(n - 1)) {
secondDev[i] <- (yVec[i + 1] - 2 * yVec[i] + yVec[i - 1]) / ((xVec[i + 1] - xVec[i])^2)
}
# Use forward difference for the first point and backward difference for the last point
secondDev[1] <- (yVec[3] - 2 * yVec[2] + yVec[1]) / ((xVec[2] - xVec[1])^2)
secondDev[n] <- (yVec[n] - 2 * yVec[n - 1] + yVec[n - 2]) / ((xVec[n] - xVec[n - 1])^2)
return(secondDev)
}
# Compute the acceleration of the rocket at each time
acceleration <- compute_second_derivative(rocket_data$Time, rocket_data$Distance)
# Plot the acceleration as a function of time
ggplot(data.frame(Time = rocket_data$Time, Acceleration = acceleration), aes(x = Time, y = Acceleration)) +
geom_line(color = "green") +
labs(title = "Acceleration of the Rocket",
x = "Time (sec)",
y = "Acceleration (m/sec^2)") +
theme_minimal()
# Load necessary libraries
library(readxl)
# Load necessary libraries
library(readxl)
# Load the data
rocket_data <- read_excel("/Users/thelion/CST8233-Numerical-Computing/rocket1.xlsx")
# Rename columns for convenience
colnames(rocket_data) <- c("Time", "Distance")
# Plot the distance travelled by the rocket as a function of time
ggplot(rocket_data, aes(x = Time, y = Distance)) +
geom_line(color = "blue") +
labs(title = "Distance Travelled by the Rocket",
x = "Time (sec)",
y = "Distance (m)") +
theme_minimal()
# Function to compute the first derivative using Central Divided Difference (CDD)
compute_first_derivative <- function(xVec, yVec) {
n <- length(xVec)
firstDev <- numeric(n)
for (i in 2:(n - 1)) {
firstDev[i] <- (yVec[i + 1] - yVec[i - 1]) / (xVec[i + 1] - xVec[i - 1])
}
# Use forward difference for the first point and backward difference for the last point
firstDev[1] <- (yVec[2] - yVec[1]) / (xVec[2] - xVec[1])
firstDev[n] <- (yVec[n] - yVec[n - 1]) / (xVec[n] - xVec[n - 1])
return(firstDev)
}
# Compute the velocity of the rocket at each time
velocity <- compute_first_derivative(rocket_data$Time, rocket_data$Distance)
# Plot the velocity as a function of time
ggplot(data.frame(Time = rocket_data$Time, Velocity = velocity), aes(x = Time, y = Velocity)) +
geom_line(color = "red") +
labs(title = "Velocity of the Rocket",
x = "Time (sec)",
y = "Velocity (m/sec)") +
theme_minimal()
# Function to compute the second derivative
compute_second_derivative <- function(xVec, yVec) {
n <- length(xVec)
secondDev <- numeric(n)
for (i in 2:(n - 1)) {
secondDev[i] <- (yVec[i + 1] - 2 * yVec[i] + yVec[i - 1]) / ((xVec[i + 1] - xVec[i])^2)
}
# Use forward difference for the first point and backward difference for the last point
secondDev[1] <- (yVec[3] - 2 * yVec[2] + yVec[1]) / ((xVec[2] - xVec[1])^2)
secondDev[n] <- (yVec[n] - 2 * yVec[n - 1] + yVec[n - 2]) / ((xVec[n] - xVec[n - 1])^2)
return(secondDev)
}
# Function to compute the first derivative using Central Divided Difference (CDD)
compute_first_derivative <- function(xVec, yVec) {
n <- length(xVec)
firstDev <- numeric(n)
for (i in 2:(n - 1)) {
firstDev[i] <- (yVec[i + 1] - yVec[i - 1]) / (xVec[i + 1] - xVec[i - 1])
}
# Use forward difference for the first point and backward difference for the last point
firstDev[1] <- (yVec[2] - yVec[1]) / (xVec[2] - xVec[1])
firstDev[n] <- (yVec[n] - yVec[n - 1]) / (xVec[n] - xVec[n - 1])
return(firstDev)
}
# Compute the velocity of the rocket at each time
velocity <- compute_first_derivative(rocket_data$Time, rocket_data$Distance)
# Plot the velocity as a function of time
ggplot(data.frame(Time = rocket_data$Time, Velocity = velocity), aes(x = Time, y = Velocity)) +
geom_line(color = "red") +
labs(title = "Velocity of the Rocket",
x = "Time (sec)",
y = "Velocity (m/sec)") +
theme_minimal()
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term\tln(1+x)\tAbsolute Error\tRelative Error\n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, "\t", series, "\n")
cat(n, "\t", series, "\t", abs_error, "\t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term\tln(1+x)\tAbsolute Error\tRelative Error\n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, "\t", series, "\t", abs_error, "\t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
series <- 0
cat("n\tSeries Value\n")
cat("------------------------\n")
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
# Compute and print the value of the series for up to ten terms
cat(n, "\t", series, "\n")
}
# Print a separator for clarity
cat("\nErrors:\n")
cat("n\tAbsolute Error\tRelative Error\n")
cat("----------------------------------------\n")
# Reinitialize series for error calculation
series <- 0
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
# Calculate errors
true_value <- log(1 + x)
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
# Print errors
cat(n, "\t", abs_error, "\t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Enter the value of x: "))
# Compute series and errors
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term \tln(1+x) \tAbsolute Error \tRelative Error\n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, "\t", series, "\t", abs_error, "\t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term\tln(1+x)\tAbsolute Error\tRelative Error\n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, " \t", series, " \t", abs_error, " \t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat(". Term\tln(1+x)\t  Absolute Error\t. Relative Error\n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, " \t", series, " \t", abs_error, " \t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term. \tln(1+x)\tAbsolute Error. \tRelative Error. \n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, " \t", series, " \t", abs_error, " \t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term. \tln(1+x)   \tAbsolute Error. \tRelative Error\n")
cat("--------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, " \t", series, " \t", abs_error, " \t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term \tln(1+x)  \tAbsolute Error \tRelative Error\n")
cat("-------------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, " \t", series, " \t", abs_error, " \t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term \tln(1+x) \tAbsolute Error \tRelative Error\n")
cat("-------------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, " \t", series, " \t", abs_error, " \t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
#results <- maclaurin_ln(x, terms = 10)
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 10) {
# Print a separator for clarity
cat("Term \tln(1+x) \tAbsolute Error \tRelative Error\n")
cat("-------------------------------------------------------\n")
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric(), Absolute_Error = numeric(), Relative_Error = numeric())
true_value <- log(1 + x)
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
abs_error <- abs(true_value - series)
rel_error <- abs_error / abs(true_value)
cat(n, " \t", series, " \t", abs_error, " \t", rel_error, "\n")
}
}
# User input
x <- as.numeric(readline(prompt = "Please enter the value of x: "))
# Compute series and errors
maclaurin_ln(x, terms = 10)
# Function to compute the Maclaurin series for ln(1 + x) and errors
maclaurin_ln <- function(x, terms = 100) {
series <- 0
results <- data.frame(Term = integer(), Series_Value = numeric())
for (n in 1:terms) {
term <- ((-1)^(n + 1) * x^n) / n
series <- series + term
results <- rbind(results, data.frame(Term = n, Series_Value = series))
}
return(results)
}
# Compute series for 100 terms
results_100 <- maclaurin_ln(x, terms = 100)
# Plot the series as a function of the number of terms
library(ggplot2)
ggplot(results_100, aes(x = Term, y = Series_Value)) +
geom_line(color = "blue") +
labs(title = "Maclaurin Series Approximation of ln(1 + x) with 100 Terms",
x = "Number of Terms",
y = "Series Value") +
theme_minimal()
# Load necessary libraries
library(readxl)
# Load the data
rocket_data <- read_excel("/Users/thelion/CST8233-Numerical-Computing/rocket1.xlsx")
# Rename columns for convenience
colnames(rocket_data) <- c("Time", "Distance")
# Plot the distance travelled by the rocket as a function of time
ggplot(rocket_data, aes(x = Time, y = Distance)) +
geom_line(color = "blue") +
labs(title = "Distance Travelled by the Rocket",
x = "Time (sec)",
y = "Distance (m)") +
theme_minimal()
# Function to compute the first derivative using Central Divided Difference (CDD)
compute_first_derivative <- function(xVec, yVec) {
n <- length(xVec)
firstDev <- numeric(n)
for (i in 2:(n - 1)) {
firstDev[i] <- (yVec[i + 1] - yVec[i - 1]) / (xVec[i + 1] - xVec[i - 1])
}
# Use forward difference for the first point and backward difference for the last point
firstDev[1] <- (yVec[2] - yVec[1]) / (xVec[2] - xVec[1])
firstDev[n] <- (yVec[n] - yVec[n - 1]) / (xVec[n] - xVec[n - 1])
return(firstDev)
}
# Compute the velocity of the rocket at each time
velocity <- compute_first_derivative(rocket_data$Time, rocket_data$Distance)
# Plot the velocity as a function of time
ggplot(data.frame(Time = rocket_data$Time, Velocity = velocity), aes(x = Time, y = Velocity)) +
geom_line(color = "red") +
labs(title = "Velocity of the Rocket as a Function of Time",
x = "Time (sec)",
y = "Velocity (m/sec)") +
theme_minimal()
# Function to compute the second derivative
compute_second_derivative <- function(xVec, yVec) {
n <- length(xVec)
secondDev <- numeric(n)
for (i in 2:(n - 1)) {
secondDev[i] <- (yVec[i + 1] - 2 * yVec[i] + yVec[i - 1]) / ((xVec[i + 1] - xVec[i])^2)
}
# Use forward difference for the first point and backward difference for the last point
secondDev[1] <- (yVec[3] - 2 * yVec[2] + yVec[1]) / ((xVec[2] - xVec[1])^2)
secondDev[n] <- (yVec[n] - 2 * yVec[n - 1] + yVec[n - 2]) / ((xVec[n] - xVec[n - 1])^2)
return(secondDev)
}
# Compute the acceleration of the rocket at each time
acceleration <- compute_second_derivative(rocket_data$Time, rocket_data$Distance)
# Plot the acceleration as a function of time
ggplot(data.frame(Time = rocket_data$Time, Acceleration = acceleration), aes(x = Time, y = Acceleration)) +
geom_line(color = "green") +
labs(title = "Acceleration of the Rocket as a Function of Time",
x = "Time (sec)",
y = "Acceleration (m/sec^2)") +
theme_minimal()
